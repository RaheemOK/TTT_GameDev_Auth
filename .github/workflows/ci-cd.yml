name: Provisioning Resources CI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Decode GCP Credentials
        run: |
          echo "$GCP_CREDENTIALS" | base64 -d > gcp-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/gcp-credentials.json" >> $GITHUB_ENV
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform with GOOGLE_APPLICATION_CREDENTIALS set to: $GOOGLE_APPLICATION_CREDENTIALS"
          terraform init

      - name: Apply Terraform
        id: apply
        run: |
          terraform apply -auto-approve -var "project=${{ secrets.GCP_PROJECT_ID }}" -var "region=${{ secrets.GCP_REGION }}" -var "repository_id=${{ secrets.ARTIFACT_REPO_NAME }}" -var "zone=${{ secrets.GCP_ZONE }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

      - name: Debug Terraform Output
        run: |
          terraform output
          JSON_KEY=$(terraform output -raw artifact_registry_service_account_key)
          echo "ARTIFACT_REGISTRY_SERVICE_ACCOUNT_KEY=$JSON_KEY" >> $GITHUB_ENV  # Set as an environment variable
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

      - name: Capture VM External IP to File
        run: |
          terraform output -raw vm_external_ip | grep -oP '(\d{1,3}\.){3}\d{1,3}' > vm_ip.txt
          IP=$(head -n 1 vm_ip.txt)  # Extract only the first line which should be the IP
          echo "$IP" > vm_ip.txt  # Overwrite vm_ip.txt with just the single IP

    

