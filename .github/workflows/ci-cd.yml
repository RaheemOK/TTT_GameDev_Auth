name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Decode GCP Credentials
        run: |
          echo "$GCP_CREDENTIALS" | base64 -d > gcp-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/gcp-credentials.json" >> $GITHUB_ENV
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform with GOOGLE_APPLICATION_CREDENTIALS set to: $GOOGLE_APPLICATION_CREDENTIALS"
          terraform init

      - name: Check Terraform State
        run: |
          if terraform state list | grep -q 'google_compute_instance.vm_instance' && \
             terraform state list | grep -q 'google_compute_address.static_address'; then
            echo "Infrastructure already exists. Skipping Terraform apply."
            exit 0
          fi
        continue-on-error: true


      - name: Apply Terraform
        run: terraform apply -auto-approve -var "project=${{ secrets.GCP_PROJECT_ID }}" -var "region=${{ secrets.GCP_REGION }}" -var "repository_id=${{ secrets.ARTIFACT_REPO_NAME }}" -var "zone=${{ secrets.GCP_ZONE }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

      - name: Build Docker Image
        run: docker build --platform linux/amd64 --no-cache -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/ttt-gamedev-auth-micro:latest .

      - name: Authenticate with Google Artifact Registry
        run: cat gcp-credentials.json | docker login -u _json_key --password-stdin https://${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}

      - name: Push Docker Image
        run: docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/ttt-gamedev-auth-micro:latest

      - name: Capture VM External IP to File
        run: |
          terraform output -raw vm_external_ip | grep -oP '(\d{1,3}\.){3}\d{1,3}' > vm_ip.txt
          IP=$(head -n 1 vm_ip.txt)  # Extract only the first line which should be the IP
          echo "$IP" > vm_ip.txt  # Overwrite vm_ip.txt with just the single IP

      - name: Decode SSH Key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > id_rsa_ttt_gda_micro
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up SSH Permissions
        run: |
          mkdir -p ~/.ssh
          chmod 600 id_rsa_ttt_gda_micro
          echo "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config


      - name: Deploy to GCE VM
        run: |
          set -x  # Enable debugging
          echo "Contents of vm_ip.txt:"
          cat vm_ip.txt
          IP=$(cat vm_ip.txt)
          echo "Using VM IP: $IP"
          echo "SSH command: ssh -i id_rsa_ttt_gda_micro -o StrictHostKeyChecking=no raheem@$IP"
          ssh -i id_rsa_ttt_gda_micro -o StrictHostKeyChecking=no raheem@$IP <<EOF
          echo "Inside VM"
          echo "$SERVICE_ACCOUNT_KEY" | docker login -u _json_key --password-stdin https://***-docker.pkg.dev
          docker stop ttt-gamedev-auth-micro || true &&
          docker rm ttt-gamedev-auth-micro || true &&
          docker pull europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/ttt-gamedev-auth-micro:latest &&
          docker run -d -p 8080:8080 --name ttt-gamedev-auth-micro europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/ttt-gamedev-auth-micro:latest
          EOF
          set +x  # Disable debugging
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}